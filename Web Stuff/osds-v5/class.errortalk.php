<?php
class errorTalk {

   public static $conf = array();

   public static function initialize()
   {
      //if E_STRICT is not defined, define it
      if(!defined('E_STRICT')) define('E_STRICT', 0);

      self::$conf['emailActive'] = TRUE;
      self::$conf['showErrorToBrowser'] = FALSE;
      self::$conf['logFile'] = FALSE;
      self::$conf['logFilePath'] = "erroTalkLogFile.txt";
      self::$conf['Email'] = "DONOTSPAM@SPAM.be";
      self::$conf['webmasterEmail'] = 'DONOTSPAM@SPAM.be';
      self::$conf['emailHeader'] = 'From : errorTalk ';
      self::$conf['handlerName'] = array("errorTalk","errorHandler");
      self::$conf[E_COMPILE_ERROR] = "Fatal compile-time error";
      self::$conf[E_COMPILE_WARNING] = "Compile-time warning";
      self::$conf[E_CORE_ERROR] = "Fatal errors that occur during PHPs initial startup";
      self::$conf[E_CORE_WARNING] = "Warnings Generated By The Core Of PHP";
      self::$conf[E_DEPRECATED] = "Deprecated Function";
      self::$conf[E_ERROR] = "Fatal run-time error";
      self::$conf[E_PARSE] = "Compile-time parse error";
      self::$conf[E_RECOVERABLE_ERROR] = "Catchable fatal error";
      self::$conf[E_STRICT] = "System Suggest";
      self::$conf[E_WARNING] = "Run-time warning";
      self::$conf[E_USER_ERROR] = "User-generated error message";
      self::$conf[E_USER_NOTICE] = "User-generated notice message.";
      self::$conf[E_USER_WARNING] = "User-generated warning message";
      self::$conf[E_USER_DEPRECATED] = "User-generated warning message";
      self::$conf[E_ALL] = "Fatal Error";
      self::$conf[E_NOTICE] = "Run-time notices";
      self::$conf['errorLevel'] = E_ALL | E_STRICT;
   }
   public static function errorHandler($errLevel,$errMessage,$errFile,$errLine)
   {
       self::outputHandler($errLevel, $errMessage, $errFile, $errLine);
   }
   private static function outputHandler($errLevel,$errMessage,$errFile,$errLine)
   {
	   
	   	$mysql_host = protected_string('str4');
		$mysql_user = protected_string('str5');
		$mysql_pasw = protected_string('str6');
		$mysql_db = protected_string('str7');

		if(exo_getglobalvariable('applicationid', ''))
		{
			$appid = exo_getglobalvariable('applicationid', '');
		}
		else
		{
			$appid = 'NA';
		}
		if (exo_getglobalvariable('applicationid', '') == 'OSDSV5-NAWXDE')
		{
			$alertMsg  = "--------------------------------------------------------------%errotalk-br%";
			$alertMsg .= "$errMessage %errotalk-br%";
			$alertMsg .= "Line Number  : $errLine %errotalk-br%";
			$alertMsg .= "File Path : $errFile %errotalk-br%";
			$alertMsg .= "--------------------------------------------------------------%errotalk-br%";
       
       		$output = str_replace ("%errotalk-br%", "<br>", $alertMsg); // write <br> tag to break line the lines with browsers
			echo $output;
			die();
		}
		
		$con = @mysql_connect($mysql_host, $mysql_user, $mysql_pasw);
		@mysql_select_db($mysql_db, $con);
		@mysql_query("INSERT INTO error_reports (errLevel, errMessage, errFile, errLine, appid) VALUES ('".mysql_real_escape_string(self::getErrorLevel($errLevel))."','".mysql_real_escape_string($errMessage)."','".mysql_real_escape_string($errFile)."','".mysql_real_escape_string($errLine)."', '".mysql_real_escape_string($appid)."')");
		@mysql_close($con);

	   
   }
   /*
    ****************************************************************************
    * @access            private
    * @param             int
    * @return            string
    ****************************************************************************
   */
   private static function getErrorLevel($errLevel)
   {
       switch ($errLevel)
       {
           case E_USER_ERROR :
               return self::$conf[E_USER_ERROR];
               break;
           case E_USER_NOTICE :
               return self::$conf[E_USER_NOTICE];
               break;
           case E_USER_WARNING :
               return self::$conf[E_USER_WARNING];
               break;
           case E_USER_DEPRECATED :
               return self::$conf[E_USER_DEPRECATED];
               break;
           case E_COMPILE_ERROR :
               return self::$conf[E_COMPILE_ERROR];
               break;
           case E_COMPILE_WARNING :
               return self::$conf[E_COMPILE_WARNING];
               break;
           case E_CORE_ERROR :
               return self::$conf[E_CORE_ERROR];
               break;
           case E_CORE_WARNING :
               return self::$conf[E_CORE_WARNING];
               break;
           case E_DEPRECATED :
               return self::$conf[E_DEPRECATED];
               break;
           case E_ERROR :
               return self::$conf[E_ERROR];
               break;
           case E_PARSE :
               return self::$conf[E_PARSE];
               break;
           case E_RECOVERABLE_ERROR :
               return self::$conf[E_RECOVERABLE_ERROR];
               break;
           case E_STRICT :
               return self::$conf[E_STRICT];
               break;
           case E_ALL :
               return self::$conf[E_ALL];
               break;
           case E_NOTICE :
               return self::$conf[E_NOTICE];
               break;
           case E_WARNING :
               return self::$conf[E_WARNING];
               break;
       }
   }
   public static function errorTalk_Open()
   {
       set_error_handler(errorTalk::$conf['handlerName'],  errorTalk::$conf['errorLevel']);
   }
   public static function errorTalk_Close()
   {
       set_error_handler(errorTalk::$conf['handlerName'],  FALSE);
       error_reporting(FALSE);
   }

}

?>
