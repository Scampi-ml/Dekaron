<?php
class report_error{

   public static $conf = array();

   public static function initialize()
   {
      if(!defined('E_STRICT')) define('E_STRICT', 0);
      self::$conf['showErrorToBrowser'] = FALSE;
      self::$conf['logFile'] = TRUE;
      self::$conf['logFilePath'] = "logs/report_error-".date("m_d_y").".txt";
      self::$conf['handlerName'] = array("report_error","errorHandler");
      self::$conf[E_COMPILE_ERROR] = "Fatal compile-time errors";
      self::$conf[E_COMPILE_WARNING] = "Compile-time warnings";
      self::$conf[E_CORE_ERROR] = "Fatal errors that occur during PHP's initial startup";
      self::$conf[E_CORE_WARNING] = "Warnings Generated By The Core Of PHP";
      self::$conf[E_DEPRECATED] = "Deprecated Function";
      self::$conf[E_ERROR] = "Fatal run-time errors";
      self::$conf[E_PARSE] = "Compile-time parse errors";
      self::$conf[E_RECOVERABLE_ERROR] = "Catchable fatal error";
      self::$conf[E_STRICT] = "System Suggest";
      self::$conf[E_WARNING] = "Run-time warnings";
      self::$conf[E_USER_ERROR] = "User-generated error message";
      self::$conf[E_USER_NOTICE] = "User-generated notice message.";
      self::$conf[E_USER_WARNING] = "User-generated warning message";
      self::$conf[E_USER_DEPRECATED] = "User-generated warning message";
      self::$conf[E_ALL] = "Fatal Error";
      self::$conf[E_NOTICE] = "Run-time notices";
      self::$conf['errorLevel'] = E_ALL | E_STRICT;
   }
   public static function errorHandler($errLevel,$errMessage,$errFile,$errLine,$errContext)
   {
       self::outputHandler($errLevel, $errMessage, $errFile, $errLine, $errContext);
   }
   private static function outputHandler($errLevel,$errMessage,$errFile,$errLine,$errContext)
   {
   	   $alertMsg = "<div class='message error'>";
       $alertMsg .= "**************************************************************%error_report-br%";
       $alertMsg .= "[".self::getErrorLevel($errLevel)."] ($errMessage)%error_report-br%";
       $alertMsg .= "Line Number  : $errLine%error_report-br%";
       $alertMsg .= "File Path : $errFile%error_report-br%";
	   $alertMsg .= "User Name : ".$_SESSION['USER']."%error_report-br%";
       $alertMsg .= "Date : ".date('d.m.Y h:i:s')."%error_report-br%";
       $alertMsg .= "**************************************************************%error_report-br%";
	   $alertMsg .= "</div>%error_report-br%";
       
       $alertMsg = str_replace ("%error_report-br%", "\r\n", $alertMsg); // write /r/n to break line with E-mail & Error File

       if(self::$conf['logFile'])
          self::LogErrorToFile(strip_tags($alertMsg));
   }
   private static function LogErrorToFile($alertMsg)
   {
       error_log($alertMsg, 3, self::$conf['logFilePath']);
   }
   private static function getErrorLevel($errLevel)
   {
       switch ($errLevel)
       {
           case E_USER_ERROR :
               return self::$conf[E_USER_ERROR];
               break;
           case E_USER_NOTICE :
               return self::$conf[E_USER_NOTICE];
               break;
           case E_USER_WARNING :
               return self::$conf[E_USER_WARNING];
               break;
           case E_USER_DEPRECATED :
               return self::$conf[E_USER_DEPRECATED];
               break;
           case E_COMPILE_ERROR :
               return self::$conf[E_COMPILE_ERROR];
               break;
           case E_COMPILE_WARNING :
               return self::$conf[E_COMPILE_WARNING];
               break;
           case E_CORE_ERROR :
               return self::$conf[E_CORE_ERROR];
               break;
           case E_CORE_WARNING :
               return self::$conf[E_CORE_WARNING];
               break;
           case E_DEPRECATED :
               return self::$conf[E_DEPRECATED];
               break;
           case E_ERROR :
               return self::$conf[E_ERROR];
               break;
           case E_PARSE :
               return self::$conf[E_PARSE];
               break;
           case E_RECOVERABLE_ERROR :
               return self::$conf[E_RECOVERABLE_ERROR];
               break;
           case E_STRICT :
               return self::$conf[E_STRICT];
               break;
           case E_ALL :
               return self::$conf[E_ALL];
               break;
           case E_NOTICE :
               return self::$conf[E_NOTICE];
               break;
           case E_WARNING :
               return self::$conf[E_WARNING];
               break;
       }
   }
   public static function report_error_Open()
   {
       set_error_handler(report_error::$conf['handlerName'],  report_error::$conf['errorLevel']);
   }
   public static function report_error_Close()
   {
       set_error_handler(report_error::$conf['handlerName'],  FALSE);
       error_reporting(FALSE);
   }
}

?>
